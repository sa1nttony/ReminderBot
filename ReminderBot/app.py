import telebot
import datetime
import random
import os
import django
import time

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ReminderBot.settings')
django.setup()

from config import TOKEN
from phrases import commands, example_headers, example_descriptions, hints
from bot.models import Chat, ChatUser, Task, User
from utils import (IncorrectFormat,
                   TimePassed,
                   UserAlreadyExist,
                   add_new_user,
                   user_exist,
                   get_account,
                   new_password,
                   new_task,
                   validate_datetime,
                   get_timezone_by_location,
                   update_user_tz,
                   edit_task,
                   get_tasks,
                   convert_to_user_tz,
                   )


tbot = telebot.TeleBot(TOKEN, threaded=True, num_threads=300, parse_mode='HTML')

#TODO –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ –±–¥ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞, –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –µ–≥–æ –≤ —á–∞—Ç, –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é new_task
@tbot.message_handler(commands=['help'])
def info(message: telebot.types.Message):
    text = """–¶–µ–ª—å –±–æ—Ç–∞ - –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –≤—Å—Ç—Ä–µ—á–∞—Ö –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–ª–∞—Ö. 
–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
"""
    counter = 1
    for c in [*commands]:
        cmnd = f'{counter}. {c} - {commands[c]}\n'
        text = text + cmnd
        counter += 1
    tbot.reply_to(message, text)


@tbot.message_handler(commands=['start'])
def register_user(message: telebot.types.Message):
    firstname = message.from_user.first_name
    username = message.from_user.username
    telegram_id = message.from_user.id
    try:
        password = add_new_user(firstname, username, telegram_id)
    except UserAlreadyExist as e:
        tbot.reply_to(message, f'–û—à–∏–±–∫–∞: {e}')
    else:
        self_message = f"""–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! \n–í–∞—à –ª–æ–≥–∏–Ω <strong>{username}</strong> 
        –í–∞—à –ø–∞—Ä–æ–ª—å <span class="tg-spoiler"><strong>{password}</strong></span>"""
        tbot.reply_to(message, self_message, parse_mode='HTML')
        get_user_tz(message)


def get_user_tz(message):
    text = """–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—ã–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. üåç
–ë–ª–∞–≥–æ–¥–∞—Ä—è –Ω–µ–π —è —Å–º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    button = telebot.types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location=True)
    markup.add(button)
    tbot.send_message(message.chat.id, text, reply_markup=markup)


@tbot.message_handler(commands=['tz'])
def change_user_tz(message: telebot.types.Message):
    user_tz = User.objects.get(telegram_id=message.from_user.id).timezone
    text = f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å - {user_tz}"
    tbot.send_message(message.chat.id, text)
    get_user_tz(message)


@tbot.message_handler(commands=['my_account'])
def my_account(message: telebot.types.Message):
    username = message.from_user.username
    user_id = message.from_user.id
    chat_id = message.chat.id
    account = get_account(username)
    if user_id != chat_id:
        tbot.reply_to(message, f'–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –ª—É—á—à–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @{tbot.user.username}, '
                               f'—Ç—ã –≤–µ–¥—å –Ω–µ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –≤–µ—Å—å —á–∞—Ç —É–≤–∏–¥–µ–ª —Ç–≤–æ–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å?')
    else:
        tbot.reply_to(message, f"""–í–∞—à –ª–æ–≥–∏–Ω <strong>{account['username']}</strong>\n–í–∞—à –ø–∞—Ä–æ–ª—å <span class="tg-spoiler"><strong>{account['password']}</strong></span>""",
                      parse_mode='HTML')


@tbot.message_handler(commands=['change_password'])
def change_password(message: telebot.types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if user_id != chat_id:
        tbot.reply_to(message, f'–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –ª—É—á—à–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @{tbot.user.username}, '
                               f'—Ç—ã –≤–µ–¥—å –Ω–µ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –≤–µ—Å—å —á–∞—Ç —É–≤–∏–¥–µ–ª —Ç–≤–æ–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å?')
    else:
        new_password(user_id)
        account = get_account(user_id)
        tbot.reply_to(message, f"""–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω\n–í–∞—à –ª–æ–≥–∏–Ω <strong>{account['username']}</strong>\n–í–∞—à –ø–∞—Ä–æ–ª—å <span class="tg-spoiler"><strong>{account['password']}</strong></span>""",
                      parse_mode='HTML')

#–í—ã—á–∏—Å–ª–µ–Ω–∏–µ tz
@tbot.message_handler(content_types=['location'])
def get_location(message: telebot.types.Message):
    latitude = message.location.latitude
    longitude = message.location.longitude
    tz = get_timezone_by_location(longitude=longitude, latitude=latitude)
    update_user_tz(tz, str(message.from_user.id))
    text = f"–¢–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å - {str(tz)}"
    markup = telebot.types.ReplyKeyboardRemove()
    tbot.send_message(message.chat.id, text, reply_markup=markup)


#–ë–ª–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
@tbot.message_handler(commands=['new_task'])
def start_task(message: telebot.types.Message):
    telegram_id = message.from_user.id
    task_info = {}
    task_info['chat'] = message.chat.id
    task_info['user'] = telegram_id
    msg = tbot.send_message(message.chat.id, f'–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è @{task_info["user"]}\n'
                                     f'–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä "{example_headers[random.randint(0, len(example_headers)-1)]}"')
    task_info['prev_msg'] = (msg.chat.id, msg.id)
    tbot.register_next_step_handler(message, task_header, task_info)


def task_user(message, task_info):
    task_info['user'] = message.text[1::]
    tbot.delete_message(message.chat.id, message.id)
    tbot.delete_message(message.chat.id, message.id - 1)
    msg = tbot.send_message(message.chat.id, f'–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è @{task_info["user"]}\n'
                                             f'–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä "{example_headers[random.randint(0, len(example_headers) - 1)]}"')
    tbot.register_next_step_handler(msg, task_header, task_info)


def task_header(message, task_info):
    task_info['header'] = message.text
    tbot.delete_message(message.chat.id, message.id)
    message_text = f"""<strong>üí° –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:</strong>

<strong>–ù–∞–∑–≤–∞–Ω–∏–µ</strong>: <em>{task_info['header']}</em>
_____
–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä "{example_descriptions[random.randint(0, len(example_headers)-1)]}\""""
    tbot.edit_message_text(message_text, task_info['prev_msg'][0], task_info['prev_msg'][1])
    tbot.register_next_step_handler(message, task_datetime, task_info)


def task_datetime(message, task_info):
    task_info['description'] = message.text
    tbot.delete_message(message.chat.id, message.id)
    message_text = f"""<strong>üí° –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:</strong>

<strong>–ù–∞–∑–≤–∞–Ω–∏–µ</strong>: <em>{task_info['header']}</em>
<strong>–û–ø–∏—Å–∞–Ω–∏–µ</strong>: <em>{task_info['description']}</em>
_____
–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î –ú–ú –ì–ì–ì–ì –ß–ß:–ú–ú". –ù–∞–ø—Ä–∏–º–µ—Ä "{datetime.datetime.now().strftime("%d.%m.%Y %H:%M")}\""""
    tbot.edit_message_text(message_text, task_info['prev_msg'][0], task_info['prev_msg'][1])
    tbot.register_next_step_handler(message, create_task, task_info)


def create_task(message: telebot.types.Message, task_info):
    try:
        tbot.delete_message(message.chat.id, message.id)
        date = validate_datetime(message.text)
    except (IncorrectFormat, TimePassed) as error:
        error_text = f"""<strong>üí° –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:</strong>

<strong>–ù–∞–∑–≤–∞–Ω–∏–µ</strong>: <em>{task_info['header']}</em>
<strong>–û–ø–∏—Å–∞–Ω–∏–µ</strong>: <em>{task_info['description']}</em>
_____
‚ùå –û—à–∏–±–∫–∞
{error}
–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú". –ù–∞–ø—Ä–∏–º–µ—Ä "{datetime.datetime.now().strftime("%d.%m.%Y %H:%M")}\""""
        tbot.edit_message_text(error_text, task_info['prev_msg'][0], task_info['prev_msg'][1])
        tbot.register_next_step_handler(message, create_task, task_info)
    else:
        task_info['date'] = date
        message_text = f"""<strong>‚úÖ–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:</strong>

<strong>–ù–∞–∑–≤–∞–Ω–∏–µ</strong>: <em>{task_info['header']}</em>
<strong>–û–ø–∏—Å–∞–Ω–∏–µ</strong>: <em>{task_info['description']}</em>
<strong>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</strong>: <em>{convert_to_user_tz(task_info['date'], message.from_user.id).strftime("%d.%m.%Y %H:%M")}</em>
    """
        tbot.edit_message_text(message_text, task_info['prev_msg'][0], task_info['prev_msg'][1])
        new_task(task_info['header'], task_info['description'], task_info['date'], task_info['user'])


#–ë–ª–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def send_tasks(telegram_id, chat_id):
    markup = telebot.types.InlineKeyboardMarkup()
    tasks = get_tasks(telegram_id)
    for task in tasks:
        button = telebot.types.InlineKeyboardButton(text=task['header'], callback_data=f"show_task:{task['id']}")
        markup.add(button)
    tbot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", reply_markup=markup)


@tbot.message_handler(commands=['show_tasks'])
def show_tasks(message: telebot.types.Message):
    send_tasks(message.from_user.id, message.chat.id)


#Callback handler
@tbot.callback_query_handler(func=lambda call: call.data.startswith("show_task:"))
def task_details(call):
    task_id = call.data.split(":")[1]
    message_id = call.message.message_id
    telegram_id = call.from_user.id
    markup = telebot.types.InlineKeyboardMarkup()
    task = Task.objects.get(id=task_id)
    markup.add(telebot.types.InlineKeyboardButton(text="üìú –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_task:{task_id}:header"))
    markup.add(telebot.types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_task:{task_id}:description"))
    markup.add(telebot.types.InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è", callback_data=f"edit_task:{task_id}:date"))
    markup.add(telebot.types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=f"edit_task:{task_id}:canceled"))
    markup.add(telebot.types.InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"back"))
    text = f"""<strong>üóì –ü—Ä–µ–¥—Å—Ç–æ—è—â–µ–µ —Å–æ–±—ã—Ç–∏–µ:</strong>
<strong>–ù–∞–∑–≤–∞–Ω–∏–µ</strong>: <em>{task.header}</em>
<strong>–û–ø–∏—Å–∞–Ω–∏–µ</strong>: <em>{task.description}</em>
<strong>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</strong>: <em>{convert_to_user_tz(task.date, telegram_id).strftime("%d.%m.%Y %H:%M")}</em>"""
    tbot.edit_message_text(chat_id=telegram_id, message_id=message_id, text=text, reply_markup=markup)

@tbot.callback_query_handler(func=lambda call: call.data.startswith("back"))
def back_to_tasks(call):
    tbot.delete_message(call.message.chat.id, call.message.message_id)
    send_tasks(call.from_user.id, call.message.chat.id)


@tbot.callback_query_handler(func=lambda call: call.data.startswith("edit_task:"))
def get_update_task_info(call):
    task_id = call.data.split(":")[1]
    field = call.data.split(":")[2]
    task = Task.objects.get(id=task_id)
    if field != 'canceled':
        text = f"""<strong>üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</strong>
        <strong>–ù–∞–∑–≤–∞–Ω–∏–µ</strong>: <em>{task.header}</em>
        <strong>–û–ø–∏—Å–∞–Ω–∏–µ</strong>: <em>{task.description}</em>
        <strong>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</strong>: <em>{convert_to_user_tz(task.date, call.from_user.id).strftime("%d.%m.%Y %H:%M")}</em>
    _________________
    –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"""
        if field == 'date':
            text = text + f'\n –ü–æ–¥—Å–∫–∞–∑–∫–∞: –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤–≤–æ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {datetime.datetime.now().strftime("%d.%m.%Y %H:%M")}'
        tbot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text, reply_markup=None)
        tbot.register_next_step_handler(call.message, update_task, task_id, field, call.message)
    else:
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_task:{task_id}:y"))
        markup.add(telebot.types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –Ω–µ —É–¥–∞–ª—è—Ç—å", callback_data=f"delete_task:{task_id}:n"))
        text = f"""<strong>üí¢‚úÇÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:</strong>
                <strong>–ù–∞–∑–≤–∞–Ω–∏–µ</strong>: <em>{task.header}</em>
                <strong>–û–ø–∏—Å–∞–Ω–∏–µ</strong>: <em>{task.description}</em>
                <strong>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</strong>: <em>{convert_to_user_tz(task.date, call.from_user.id)}</em>
            _________________
            –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ ‚ùì"""
        tbot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text,
                               reply_markup=markup)


def update_task(message, task_id, field, bot_message):
    edit_task(task_id, field, message.text)
    task = Task.objects.get(id=task_id)
    tbot.delete_message(message.chat.id, message.id)
    text = f"""<strong>‚≠êÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã:</strong>
<strong>–ù–∞–∑–≤–∞–Ω–∏–µ</strong>: <em>{task.header}</em>
<strong>–û–ø–∏—Å–∞–Ω–∏–µ</strong>: <em>{task.description}</em>
<strong>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</strong>: <em>{convert_to_user_tz(task.date, message.from_user.id).strftime("%d.%m.%Y %H:%M")}</em>"""
    tbot.edit_message_text(chat_id=bot_message.chat.id, message_id=bot_message.id, text=text)


@tbot.callback_query_handler(func=lambda call: call.data.startswith("delete_task:"))
def delete_task(call):
    if call.data.split(":")[2] == 'y':
        edit_task(call.data.split(":")[1], 'canceled', '')
        text = '‚ôªÔ∏è –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'
        tbot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text, reply_markup=None)
    else:
        text = 'üåÄ –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è'
        tbot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text, reply_markup=None)


def send_remind(task, user):
    text = f"""<strong>‚ÄºÔ∏è –ù–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è ‚ÄºÔ∏è:</strong>
<strong>–ù–∞–∑–≤–∞–Ω–∏–µ</strong>: <em>{task.header}</em>
<strong>–û–ø–∏—Å–∞–Ω–∏–µ</strong>: <em>{task.description}</em>
<strong>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</strong>: <em>{convert_to_user_tz(task.date, user.telegram_id).strftime("%d.%m.%Y %H:%M")}</em>"""
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish_task:{task.id}"))
    markup.row(
        telebot.types.InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏: 5 –º–∏–Ω.", callback_data=f"move_task:{task.id}:5m"),
        telebot.types.InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏: 10 –º–∏–Ω.", callback_data=f"move_task:{task.id}:10m")
    )
    markup.row(
        telebot.types.InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏: 15 –º–∏–Ω.", callback_data=f"move_task:{task.id}:15m"),
        telebot.types.InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏: 30 –º–∏–Ω.", callback_data=f"move_task:{task.id}:30m")
    )
    markup.row(
        telebot.types.InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏: 1 —á–∞—Å", callback_data=f"move_task:{task.id}:1h"),
        telebot.types.InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏: 3 —á–∞—Å–∞", callback_data=f"move_task:{task.id}:3h")
    )
    markup.row(
        telebot.types.InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏: 6 —á–∞—Å–æ–≤", callback_data=f"move_task:{task.id}:6h"),
        telebot.types.InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏: –°—É—Ç–∫–∏", callback_data=f"move_task:{task.id}:1d")
    )
    tbot.send_message(user.telegram_id, text, reply_markup=markup)


@tbot.callback_query_handler(func=lambda call: call.data.startswith("finish_task:"))
def finish_task(call):
    task_id = call.data.split(':')[1]
    edit_task(task_id, "complete", 1)
    task = Task.objects.get(id=task_id)
    text = f"""<strong>üéâ –°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:</strong>
<strong>–ù–∞–∑–≤–∞–Ω–∏–µ</strong>: <em>{task.header}</em>
<strong>–û–ø–∏—Å–∞–Ω–∏–µ</strong>: <em>{task.description}</em>
<strong>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</strong>: <em>{convert_to_user_tz(task.date, task.user.telegram_id).strftime("%d.%m.%Y %H:%M")}</em>"""
    tbot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text, reply_markup=None)


@tbot.callback_query_handler(func=lambda call: call.data.startswith("move_task:"))
def move_task(call):
    periods = {
        '5m': datetime.timedelta(minutes=5),
        '10m': datetime.timedelta(minutes=10),
        '15m': datetime.timedelta(minutes=15),
        '30m': datetime.timedelta(minutes=30),
        '1h': datetime.timedelta(hours=1),
        '3h': datetime.timedelta(hours=3),
        '6h': datetime.timedelta(hours=6),
        '1d': datetime.timedelta(days=1),
    }
    task = Task.objects.get(id=call.data.split(":")[1])
    new_date = task.date + periods[call.data.split(':')[2]]
    edit_task(task.id, "date", new_date)
    text = f"""<strong>‚û°Ô∏èüìÖ –°–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ:</strong>
<strong>–ù–∞–∑–≤–∞–Ω–∏–µ</strong>: <em>{task.header}</em>
<strong>–û–ø–∏—Å–∞–Ω–∏–µ</strong>: <em>{task.description}</em>
<strong>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</strong>: <em>{convert_to_user_tz(task.date, task.user.telegram_id).strftime("%d.%m.%Y %H:%M")}</em>"""
    tbot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text, reply_markup=None)


# Bot non-stop working
while True:
    try:
        tbot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ polling: {e}")
        time.sleep(1)
